/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SignInModel } from '../models';
// @ts-ignore
import { SignUpModel } from '../models';
/**
 * LoginAcountsApi - axios parameter creator
 * @export
 */
export const LoginAcountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignInModel} [signInModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginAcountsSignInPost: async (signInModel?: SignInModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LoginAcounts/SignIn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpModel} [signUpModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginAcountsSignUpPost: async (signUpModel?: SignUpModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LoginAcounts/SignUp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginAcountsApi - functional programming interface
 * @export
 */
export const LoginAcountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginAcountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SignInModel} [signInModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginAcountsSignInPost(signInModel?: SignInModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginAcountsSignInPost(signInModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignUpModel} [signUpModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginAcountsSignUpPost(signUpModel?: SignUpModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginAcountsSignUpPost(signUpModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginAcountsApi - factory interface
 * @export
 */
export const LoginAcountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginAcountsApiFp(configuration)
    return {
        /**
         * 
         * @param {SignInModel} [signInModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginAcountsSignInPost(signInModel?: SignInModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiLoginAcountsSignInPost(signInModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignUpModel} [signUpModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginAcountsSignUpPost(signUpModel?: SignUpModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiLoginAcountsSignUpPost(signUpModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginAcountsApi - object-oriented interface
 * @export
 * @class LoginAcountsApi
 * @extends {BaseAPI}
 */
export class LoginAcountsApi extends BaseAPI {
    /**
     * 
     * @param {SignInModel} [signInModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAcountsApi
     */
    public apiLoginAcountsSignInPost(signInModel?: SignInModel, options?: AxiosRequestConfig) {
        return LoginAcountsApiFp(this.configuration).apiLoginAcountsSignInPost(signInModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpModel} [signUpModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAcountsApi
     */
    public apiLoginAcountsSignUpPost(signUpModel?: SignUpModel, options?: AxiosRequestConfig) {
        return LoginAcountsApiFp(this.configuration).apiLoginAcountsSignUpPost(signUpModel, options).then((request) => request(this.axios, this.basePath));
    }
}
